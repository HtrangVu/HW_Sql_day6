/*1. Show film which dont have any screening */
SELECT *
FROM film f
LEFT JOIN screening s ON f.id = s.film_id
WHERE s.id IS NULL;

/* 2. Who book more than 1 seat in 1 booking */
SELECT DISTINCT c.first_name, COUNT(r.id) number_of_seat,b.id booking_id
FROM booking b
JOIN reserved_seat r ON b.id = r.booking_id
JOIN customer c ON b.customer_id = c.id
GROUP BY r.booking_id
HAVING number_of_seat > 1;

/* 3. Show room show more than 2 film in one day */
SELECT DISTINCT r.name     
FROM screening s
JOIN room r ON s.room_id = r.id
GROUP BY DATE(s.start_time), r.id
HAVING COUNT(film_id) > 2; 

/* 4. Which room show the least film? */
          
WITH film_cnt AS (SELECT COUNT(DISTINCT f.id) number_of_film, r.name
                  FROM room r
				  LEFT JOIN screening s ON r.id = s.room_id
				  JOIN film f ON s.film_id = f.id
				  GROUP BY r.id )
SELECT name
FROM film_cnt
WHERE number_of_film = (SELECT MIN(number_of_film)
						FROM film_cnt);
                        
/* 5.what film don't have booking */
SELECT DISTINCT f.name
FROM screening s
JOIN booking b ON s.id = b.screening_id
RIGHT JOIN film f ON f.id = s.film_id
WHERE b.id IS NULL;

/* 6.WHAT film have show the biggest number of room? */
WITH room_cnt AS (SELECT COUNT(DISTINCT(s.room_id)) as number_of_room, f.name
                  FROM screening s
				  JOIN film f ON s.film_id = f.id
                  GROUP BY f.id)
SELECT name, number_of_room
FROM room_cnt
WHERE number_of_room = ( SELECT MIN(number_of_room) 
                         FROM room_cnt);
			
/* 7. Show number of film  that show in every day of week and order descending */
SELECT DATE(start_time) date, COUNT( DISTINCT film_id) number_of_film
FROM screening s
JOIN film f ON s.film_id = f.id
GROUP BY date
ORDER BY number_of_film desc;
/* 8.show total length of each film that showed in 28/5/2022 */
SELECT f.name,SUM(f.length_min) total_length, DATE(s.start_time) show_date
FROM screening s
JOIN film f ON s.film_id = f.id
GROUP BY f.name, show_date
HAVING show_date = '2022-05-28';
/* 9. What film has showing time above and below average show time of all film */
SELECT name
FROM film
WHERE length_min > (SELECT AVG(length_min)
					FROM film f
                    JOIN screening s ON f.id = s.film_id);
SELECT name
FROM film
WHERE length_min < (SELECT AVG(length_min)
					FROM film f
                    JOIN screening s ON f.id = s.film_id);
/* 10. what room have least number of seat? */
WITH count_seat AS (SELECT COUNT(*) number_of_seat, r.name
                    FROM room r
                    JOIN seat s ON r.id = s.room_id
                    GROUP BY r.id)
SELECT name, number_of_seat
FROM count_seat
WHERE number_of_seat = (SELECT MIN(number_of_seat)
                        FROM count_seat);

/* 11. what room have number of seat bigger than average number of seat of all rooms */
WITH count_seat AS (SELECT COUNT(*) number_of_seat, r.name
                    FROM room r
                    JOIN seat s ON r.id = s.room_id
                    GROUP BY r.id)
SELECT name, number_of_seat
FROM count_seat
WHERE number_of_seat > (SELECT AVG(number_of_seat)
                        FROM count_seat);

/*12. Find available seat left on screening after booking id 1 */
WITH count_total_seat AS (SELECT COUNT(*) number_of_seat, r.name, r.id
						  FROM room r
                          JOIN seat s ON r.id = s.room_id
                          GROUP BY r.id),
	count_seat_resered AS(SELECT COUNT(DISTINCT(r.id)) number_of_reserved_seat, b.screening_id, ro.id, ro.name
                          FROM reserved_seat r
                          JOIN booking b ON r.booking_id = b.id
                          JOIN screening s ON b.screening_id = s.id
						  LEFT JOIN room ro ON s.room_id = ro.id
                          GROUP BY b.screening_id
                          HAVING b.screening_id = 1
                          )
SELECT (number_of_seat - number_of_reserved_seat) number_of_seat_left
FROM count_total_seat ct
JOIN count_seat_resered cr ON ct.id = cr.id;

/* 13. Show Film with total screening and order by total screening. 
BUT ONLY SHOW DATA OF FILM WITH TOTAL SCREENING > 10 */
SELECT f.name,COUNT(*) total_screening
FROM film f
JOIN screening s ON s.film_id = f.id
GROUP BY f.id
HAVING total_screening > 10
ORDER BY total_screening;

/* 14.TOP 3 DAY OF WEEK based on total booking */
WITH 
count_booking AS (SELECT COUNT(b.id) total_booking, DATE(start_time) date
				  FROM screening s
				  LEFT JOIN booking b ON s.id = b.screening_id
                  GROUP BY date
                  ORDER BY total_booking desc),
max_booking AS (SELECT COUNT(b.id) total_booking
                   FROM screening s
                   LEFT JOIN booking b ON s.id = b.screening_id
                   GROUP BY DATE(start_time)
                   ORDER BY total_booking desc
                   LIMIT 1)
SELECT *
FROM count_booking
WHERE total_booking = (SELECT total_booking
					   FROM max_booking)/* Find day with max booking*/
UNION 
SELECT *
FROM count_booking
WHERE total_booking = (SELECT COUNT(b.id) total_booking
                   FROM screening s
                   LEFT JOIN booking b ON s.id = b.screening_id
                   GROUP BY DATE(start_time)
                   HAVING total_booking != (SELECT total_booking
											FROM max_booking)
                   ORDER BY total_booking desc
                   LIMIT 1) /* Find days with 2nd largest booking */
UNION
SELECT *
FROM count_booking
WHERE total_booking = (SELECT COUNT(b.id) total_booking
                   FROM screening s
                   LEFT JOIN booking b ON s.id = b.screening_id
                   GROUP BY DATE(start_time)
                   HAVING total_booking != (SELECT total_booking
											FROM max_booking)
						AND total_booking != (SELECT COUNT(b.id) total_booking
                                              FROM screening s
                                              LEFT JOIN booking b ON s.id = b.screening_id
                                              GROUP BY DATE(start_time)
                                              HAVING total_booking != (SELECT total_booking
																	    FROM max_booking)
											  ORDER BY total_booking desc
                                              LIMIT 1)
                   ORDER BY total_booking desc
                   LIMIT 1) /* Find days with 3rd largerst number of booking */; 
                   
/* 15.CALCULATE BOOKING rate over screening of each film ORDER BY RATES. */
SELECT (COUNT(b.id)/COUNT(s.id)) rate, f.name
FROM booking b
RIGHT JOIN screening s ON s.id = b.screening_id
RIGHT JOIN film f ON s.film_id = f.id
GROUP BY f.id
ORDER BY rate;

/* 16.WHICH film has rate over average?. */
WITH
count_rate AS (SELECT (COUNT(b.id)/COUNT(s.id)) rate, f.name
			   FROM booking b
			   RIGHT JOIN screening s ON s.id = b.screening_id
               RIGHT JOIN film f ON s.film_id = f.id
               GROUP BY f.id)
SELECT name,rate
FROM count_rate
WHERE rate > (SELECT AVG(rate)
              FROM count_rate);
		
/* 17. TOP 2 people who enjoy the least TIME (in minutes) 
in the cinema based on booking info */	
WITH time_count AS (SELECT SUM(length_min) total_time, c.first_name
                    FROM customer c
                    JOIN booking b ON c.id = b.customer_id
                    JOIN screening s ON b.screening_id = s.id
                    JOIN film f ON s.film_id = f.id	
                    GROUP BY c.id)
SELECT total_time, first_name
FROM time_count
WHERE total_time = (SELECT MIN(total_time)
                    FROM time_count)
UNION 
SELECT total_time, first_name
FROM time_count
WHERE total_time = (SELECT DISTINCT total_time
                    FROM time_count
                    WHERE total_time != (SELECT MIN(total_time)
										FROM time_count)
                    ORDER BY total_time asc
                    LIMIT 1);
